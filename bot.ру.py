import telebot
from telebot import types
import requests

TELEGRAM_TOKEN = '8058995226:AAE8vFCF4JBxOQyoBz1VkOnE4FTsp5MPey0'
API_KEY = 'c9b6ade6ab2a471fba5df4cdbd06fbb2'

bot = telebot.TeleBot(TELEGRAM_TOKEN)
user_data = {}
CURRENCIES = ["USD", "KZT", "RUB", "TRY", "EUR"]


def get_conversion_rate(from_cur, to_cur):
    url = f"https://api.twelvedata.com/exchange_rate?symbol={from_cur}/{to_cur}&apikey={API_KEY}"
    res = requests.get(url).json()
    return float(res['rate']) if 'rate' in res else None


def show_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton("üìà –ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å")
    btn2 = types.KeyboardButton("üí± –û–±–º–µ–Ω")
    btn3 = types.KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    markup.add(btn1, btn2, btn3)
    bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)


@bot.message_handler(commands=['start'])
def start(message):
    user_data[message.chat.id] = {}
    show_main_menu(message.chat.id)
    bot.send_message(message.chat.id, "üîî –†–µ–∫–ª–∞–º–∞: –õ—É—á—à–∏–π –æ–±–º–µ–Ω –ø–æ –∫—É—Ä—Å—É ‚Äî —Ç–æ–ª—å–∫–æ —É –Ω–∞—Å!")


@bot.message_handler(func=lambda m: m.text == "üìà –ü–æ–∫–∞–∑–∞—Ç—å –∫—É—Ä—Å")
def show_rates(message):
    bot.send_message(message.chat.id, "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏...")
    
    base = "USD"
    result = "üåç –í–∞–ª—é—Ç—ã –°–ù–ì:\n"
    for cur in ["UZS", "KZT", "RUB", "TRY", "EUR"]:
        rate = get_conversion_rate(base, cur)
        if rate:
            result += f"{base} ‚Üí {cur} = {round(rate, 4)}\n"
    
    bot.send_message(message.chat.id, result)
    show_main_menu(message.chat.id)


@bot.message_handler(func=lambda m: m.text == "üí± –û–±–º–µ–Ω")
def exchange_step1(message):
    user_data[message.chat.id] = {}
    bot.send_message(message.chat.id, "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏...")
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [types.KeyboardButton(cur) for cur in CURRENCIES]
    markup.add(*buttons)
    markup.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"))
    
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=markup)
    bot.register_next_step_handler(message, exchange_step2)


def exchange_step2(message):
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        return show_main_menu(message.chat.id)
    
    chat_id = message.chat.id
    if message.text not in CURRENCIES:
        bot.send_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return exchange_step1(message)
    
    user_data[chat_id]['from'] = message.text
    bot.send_message(chat_id, "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏...")
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    buttons = [types.KeyboardButton(cur) for cur in CURRENCIES if cur != user_data[chat_id]['from']]
    markup.add(*buttons)
    markup.add(types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"))
    
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:", reply_markup=markup)
    bot.register_next_step_handler(message, exchange_amount)


def exchange_amount(message):
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        return show_main_menu(message.chat.id)
    
    chat_id = message.chat.id
    if message.text not in CURRENCIES:
        bot.send_message(chat_id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return exchange_step2(message)
    
    user_data[chat_id]['to'] = message.text
    bot.send_message(chat_id, "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏...")
    bot.send_message(chat_id, f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {user_data[chat_id]['from']} (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100):")
    bot.register_next_step_handler(message, calculate_exchange)


def calculate_exchange(message):
    chat_id = message.chat.id
    
    if message.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        return show_main_menu(chat_id)
    
    try:
        amount = float(message.text)
        from_cur = user_data[chat_id]['from']
        to_cur = user_data[chat_id]['to']
        rate = get_conversion_rate(from_cur, to_cur)
        
        if rate is None:
            bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return show_main_menu(chat_id)
        
        result = round(amount * rate, 2)
        bot.send_message(chat_id, f"üí± {amount} {from_cur} = {result} {to_cur} (–∫—É—Ä—Å: {rate:.4f})")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –æ–±–º–µ–Ω
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(types.KeyboardButton("üí± –°–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –æ–±–º–µ–Ω"), types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥"))
        bot.send_message(chat_id, "–•–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –æ–±–º–µ–Ω?", reply_markup=markup)
        bot.register_next_step_handler(message, handle_another_exchange)
        
    except ValueError:
        bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100):")
        bot.register_next_step_handler(message, calculate_exchange)


def handle_another_exchange(message):
    if message.text == "üí± –°–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –æ–±–º–µ–Ω":
        exchange_step1(message)
    else:
        show_main_menu(message.chat.id)


@bot.message_handler(func=lambda m: m.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
def settings(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton("üåê –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫")
    btn2 = types.KeyboardButton("üìû –°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º")
    btn3 = types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    markup.add(btn1, btn2, btn3)
    bot.send_message(message.chat.id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=markup)


@bot.message_handler(func=lambda m: m.text == "üåê –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫")
def language_settings(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton("–†—É—Å—Å–∫–∏–π")
    btn2 = types.KeyboardButton("O'zbekcha")
    btn3 = types.KeyboardButton("“ö–∞–∑–∞“õ—à–∞")
    btn4 = types.KeyboardButton("English")
    btn5 = types.KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    markup.add(btn1, btn2, btn3, btn4, btn5)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=markup)


@bot.message_handler(func=lambda m: m.text == "üìû –°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º")
def contact_support(message):
    bot.send_message(
        message.chat.id,
        "–î–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º:\n–¢–µ–ª–µ—Ñ–æ–Ω: +998887177071\nTelegram: @expressproway"
    )
    show_main_menu(message.chat.id)


@bot.message_handler(func=lambda m: m.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
def back_to_menu(message):
    show_main_menu(message.chat.id)


bot.polling(none_stop=True)
